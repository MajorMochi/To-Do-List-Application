#include <iostream>
#include <string>
#include <vector>

using namespace std;

struct Task
{
    string name, priority;
    int due_date[3];
    bool status;
};

class List
{
protected:
vector<Task> list;
Task task;
public:
void addTask()
{
    Task task;
    cout<<"Enter Task Name:"<<endl;
    cin>>task.name;

    if(task.name =="C"||task.name =="c"){return;}

    cout<<"When Is This Task Due(dd/mm/yy):"<<endl;
    for(int i=0; i<3; i++)
    {
    cin>>task.due_date[i];
    }

    cout<<"When Is This Task's Priority"<<endl;
    cin>>task.priority;

    task.status= false;
    list.push_back(task);
}

void editTask()
{
    char e;
    string input;
    printList();
    cout<<"Which Task Would You Like To Edit:"<<endl;
    cin>>input;

    if(input=="c"){return;}

    int c = stoi(input);

    if(c<1||c>list.size())
    {
        cout <<"INVALID SELECTION."<<endl;
        return;
    }

    Task &task=list[c-1];

    cout<<"What Property Would You Like To Edit(N,D,P,S):"<<endl;
    cin>>e;

    switch(e)
    {
    case 'N':
    case 'n':
        cout<<"Enter The Task's New Name:"<<endl;
        cin>>task.name;
        break;

    case 'D':
    case 'd':
        cout<<"Enter The Task's New Due Date:"<<endl;
        for(int i =0;i<3;i++){cin>>task.due_date[i];}
        break;

    case 'P':
    case 'p':
        cout<<"Enter The Task's New Priority:"<<endl;
        cin>>task.priority;
        break;

    case 'S':
    case 's':
        cout<<"Status (Complete(C)/Open(O)):"<<endl;
        cin>>e;
        if(e=='C'||e=='c')
        {
            task.status=true;
        }

        else if(e=='O'||e=='o')
        {
            task.status=false;
        }
    case 'C':
    case 'c':
        break;
    }
}

void deleteTask()
{
    string input;

    printList();
    cout<<"Which Task Would You Like To Delete:"<<endl;
    cin>>input;

    if(input=="c"){return;}

    int c = stoi(input);

    if(c<1||c>list.size())
    {
        cout<<"INVALID SELECTION"<<endl;
        return;
    }

    list.erase(list.begin()+(c-1));
    cout<<"Task "<<c<<" has been deleted."<<endl;
}

void printList()        //printing from a vector.
{
    cout<<"LIST:"<<endl;

    cout<<"Open Tasks:"<<endl;
    if(!task.status)
    {
        for(int i=0;i<list.size();i++)
        {
            const Task &task = list[i];
            cout<<i+1<<") Name: "<<task.name<<" Due Date: "<<task.due_date[0]<<"/"<<task.due_date[1]<<"/"<<task.due_date[2]<<" Priority: "<<task.priority<<endl;
        }
    }

    cout<<"Completed Tasks:"<<endl;
    if(task.status)
    {
        for(int i=0;i<list.size();i++)
        {
            const Task &task = list[i];
            cout<<i+1<<") Name: "<<task.name<<" Due Date: "<<task.due_date[0]<<"/"<<task.due_date[1]<<"/"<<task.due_date[2]<<" Priority: "<<task.priority<<endl;
        }
    }
}
};


int main()
{
List list1;
int c;
cout<<"TASK MANAGER"<<endl<<"__________________"<<endl;
cout<<"1)ADD TASK"<<endl<<"2)EDIT TASK"<<endl<<"3)DELETE A TASK"<<endl<<"4)DISPLAY TASKS"<<endl<<"6)EXIT"<<endl<<"(Enter C At Any Point To Cancel an Operation.)"<<endl;

while(c!=5)
{
    cout<<"What Would You Like To Do?"<<endl;
    cin>>c;

    switch (c)
    {
    case 1:
        list1.addTask();
        break;

    case 2:
        list1.editTask();
        break;

    case 3:
        list1.deleteTask();
        break;

    case 4:
        list1.printList();
        break;

    case 5:
        cout<<"EXITING"<<endl;
        break;

     default:
        cout<<"INVALID INPUT"<<endl;
    }
}

}
